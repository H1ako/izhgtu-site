# Generated by Django 3.2 on 2022-11-03 16:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('education', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, unique=True, verbose_name='Phone Number')),
                ('firstName', models.CharField(max_length=40, verbose_name='Name')),
                ('lastName', models.CharField(max_length=80, verbose_name='Surname')),
                ('patronymic', models.CharField(max_length=80, verbose_name='Patronymic')),
                ('picture', models.ImageField(upload_to='userPictures/', verbose_name='Profile Picture')),
                ('bgPicture', models.ImageField(upload_to='userBgPictures/', verbose_name='Profile Background Picture')),
                ('isStaff', models.BooleanField(default=False, verbose_name='Is Staff')),
                ('isSuperuser', models.BooleanField(default=False, verbose_name='Is Super User')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', users.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('name', models.CharField(max_length=60, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('file', models.FileField(upload_to='userDocuments', verbose_name='File')),
                ('fileType', models.CharField(max_length=50, verbose_name='File Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('groups', models.ManyToManyField(related_name='teachers', to='education.SpecializationGroup')),
                ('subjects', models.ManyToManyField(related_name='teachers', to='education.Subject')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='education.specializationgroup')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entrant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='entrant', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='tags',
            field=models.ManyToManyField(related_name='users', to='users.UserTag', verbose_name='Tags'),
        ),
    ]
